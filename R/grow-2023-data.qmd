---
title: "GROW 2023 Data"
author: "Shayna Sura"
format: html
editor: visual
---



<!-- TO DO - FIGURE OUT WHY THE SEAGRASS CANOPY HEIGHT AVERAGES FOR EACH PLOT ARE NOT PLOTTING IN THE RIGHT LOCATION FOR THEIR Y_VALUES!!! -->



## Data Information

### About the data

Data were downloaded as .csv files from Google Drive.

Oyster data [link](https://docs.google.com/spreadsheets/d/1SPkAdKGaTz9FBQBvVFP4YggArjNHhA2ZsPg7ZFa85XQ/edit?pli=1#gid=0) for accessing data on Google Drive.

Seagrass data [link](https://docs.google.com/spreadsheets/d/1B67Mj2S6X3iJpDYtuD5ynjN1QRwLmFrBar1ooeU03_0/edit?pli=1#gid=811567800) for accessing data on Google Drive.


### Set up

```{r}
#| echo: false
#| warning: false
#| message: false


library(readr)
library(tidyr)
library(dplyr)
library(here)
library(ggplot2)
# library(ggbeeswarm)
library(scales)

```


### Read in data
```{r}
#| echo: false
#| warning: false
#| message: false


seagrass_data <- read_csv(here("data/P2 Initial Seagrass - seagrass_initial_data.csv"))
oyster_size <- read_csv(here("data/P2 Initial Oysters - size.csv"))
oyster_abundance <- read_csv(here("data/P2 Initial Oysters - abundance.csv"))

# otherwise can use the ".." to move out of the R directory and then into the data directory.

```

```{r exploring our seagrass data}
#| echo: false
#| eval: false


glimpse(seagrass_data)

# the Percent_Cover and Canopy_Height_cm variables are reading in as characters instead of numeric. Why?
# there are some Percent_Cover values that are given as ranges (e.g., 0-1 or 0-5), and dashes are characters, not numbers.
# there are N/As for Canopy_Height_cm since those measurements were not taken at all time points.

```


```{r exploring our oyster data}
#| echo: false
#| eval: false


glimpse(oyster_size)
glimpse(oyster_abundance)

# we have a row for the "extra" GROW tile we deployed, but we don't want to include that in our summaries, so going to remove those rows from the data.

# we also have a plot label of "ST5" which seems like it might be a type.
## Shayna commented on this on the google sheet for Eme to double check. In the meantime, Shayna is manually changing this to ST3 in her downloaded .csv file of these data because it seems highly unlikely that it's anything else.

```



Decisions made about the data:
 - For oyster data, the data recorded for the "extra" GROW tile is removed and not included in further analyses.
 - For seagrass percent cover values that were recorded as ranges on the datasheets (e.g., 0-1 or 0-5), the values are being overwritten with the lower end of the range given so as to provide a conservative estimate of seagrass cover. So for a range of '0-5', the actual data value will be changed to '0'.

```{r}
#| echo: false
#| warning: false



## Oyster Data
# need to remove the rows that have data on the "Extra" GROW tile.
# need to remove the rows that have NA values for the oyster abundance

levels(as.factor(oyster_size$Plot_Type))
levels(as.factor(oyster_size$Plot_Label))

oyster_size_clean <- oyster_size %>% 
  filter(Plot_Type != "Extra")

oyster_abundance_clean <- oyster_abundance %>% 
  filter(Plot_Type != "Extra") %>% 
  filter(Plot_Label != "#N/A")





## Seagrass Data
# need to convert the Percent_Cover and Canopy_Height_cm variables to numeric instead of characters.
# can also remove unnecessary columns, specifically 'entered' and 'QA/QC'
# convert the 'Date' column to date format instead of character format?

seagrass_clean <- seagrass_data %>% 
  mutate(Percent_Cover = as.numeric(Percent_Cover)) %>% 
  mutate(Canopy_Height_cm = as.numeric(Canopy_Height_cm)) %>% 
  select(-entered) %>% 
  select(-'QA/QC')

## determine which rows in Percent_Cover were converted to NAs because the data was recorded as a range and reassign those NA values to the lower value of the range reported.

ranges <- which(is.na(seagrass_clean$Percent_Cover)) # will tell us which row(s) have NAs


# seagrass_data[ranges,]


# change the NA in the seagrass_clean for these rows to the lower value of the range given in seagrass_data
for (k in ranges){
  split_values <- strsplit(seagrass_data$Percent_Cover[k], "-")
  lower_value <- sapply(split_values, function(x) as.numeric(x[1]))
  seagrass_clean$Percent_Cover[k] = lower_value
}


## double check the for-loop worked correctly...
# seagrass_clean[ranges,]


```



## Summary Statistics

### Calculating Summary Statistics


```{r summary calculations}
#| echo: false

summary_calcs <- list(
  Mean = function(x) mean(x, na.rm = TRUE),
  n = function(x) sum(!is.na(x)),
  SD = function(x) ifelse(all(is.na(x)), NA, sd(x, na.rm = TRUE)),
  SE = function(x) ifelse(all(is.na(x)), NA, sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x))))
)

```



#### Seagrass Data - Percent Cover & Canopy Height
```{r}
#| echo: false


sg_summary_plot <- seagrass_clean %>% 
  group_by(Date,Plot_Label,Plot_Type) %>% 
  summarize(across(c(Percent_Cover,Canopy_Height_cm),
                   summary_calcs)) %>% 
    ungroup()


sg_summary_plot_type <- sg_summary_plot %>% 
  group_by(Date,Plot_Type) %>% 
  summarize(across(c(Percent_Cover_Mean,Canopy_Height_cm_Mean),
                   summary_calcs)) %>% 
    ungroup()
  
```




#### Oyster Data - Abundance
```{r}
#| echo: false


oyst_abundance_summary_tile <- oyster_abundance_clean %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type,
           Tile_Type,
           Tile_Tag) %>% 
  summarize(across(c(Oyster_Abundance),
                   summary_calcs)) %>% 
  ungroup()

# summarize the oyster data by plot type but SEPARATE for the predator versus no-predator cue tiles
oyst_abundance_summary_plot <- oyst_abundance_summary_tile %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type,
           Tile_Type) %>% 
  summarize(across(c(Oyster_Abundance_Mean),
                   summary_calcs)) %>% 
  group_by(Date,
           Plot_Type,
           Tile_Type) %>% 
  summarize(across(c(Oyster_Abundance_Mean_Mean),
                   summary_calcs)) %>% 
  ungroup()

# summarize the oyster data by plot type but for all 4 tiles, regardless of predator treatment (predator vs. no-predator cues)
oyst_abundance_summary_plot_type <- oyst_abundance_summary_tile %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type) %>% 
  summarize(across(c(Oyster_Abundance_Mean),
                   summary_calcs)) %>% 
  group_by(Date,
           Plot_Type) %>% 
  summarize(across(c(Oyster_Abundance_Mean_Mean),
                   summary_calcs)) %>% 
  ungroup()

```




#### Oyster Data - Size
```{r}
#| echo: false

# 
# summary_calcs <- list(
#   Mean = function(x) mean(x, na.rm = TRUE),
#   n = function(x) sum(!is.na(x)),
#   SD = function(x) ifelse(all(is.na(x)), NA, sd(x, na.rm = TRUE)),
#   SE = function(x) ifelse(all(is.na(x)), NA, sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x))))
# )

oyst_size_summary_tile <- oyster_size_clean %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type,
           Tile_Type,
           Tile_Tag) %>% 
  summarize(across(c(Oyster_Length_mm),
                   summary_calcs)) %>% 
  ungroup()

# summarize the oyster data by plot type but SEPARATE for the predator versus no-predator cue tiles
oyst_size_summary_plot <- oyst_size_summary_tile %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type,
           Tile_Type) %>% 
  summarize(across(c(Oyster_Length_mm_Mean),
                   summary_calcs)) %>% 
  group_by(Date,
           Plot_Type,
           Tile_Type) %>% 
  summarize(across(c(Oyster_Length_mm_Mean_Mean),
                   summary_calcs)) %>% 
  ungroup()

# summarize the oyster data by plot type but for all 4 tiles, regardless of predator treatment (predator vs. no-predator cues)
oyst_size_summary_plot_type <- oyst_size_summary_tile %>% 
  group_by(Date,
           Plot_Label,
           Plot_Type) %>% 
  summarize(across(c(Oyster_Length_mm_Mean),
                   summary_calcs)) %>% 
  group_by(Date,
           Plot_Type) %>% 
  summarize(across(c(Oyster_Length_mm_Mean_Mean),
                   summary_calcs)) %>% 
  ungroup()

```




### Plotting data in figures

#### Seagrass Data Figures


```{r combining seagrass summary tables into one table for plotting}
#| echo: false

#syntax for rename is NEW name first and then old/existing column name


# for sg_summary_plot summary table
sg_summary_plot <- sg_summary_plot %>%
  select(-Plot_Label) %>% 
  mutate(data_type = "Individual Plots")


# for sg_summary_plot_type summary table
sg_summary_plot_type <- sg_summary_plot_type %>% 
  rename(Percent_Cover_Mean = Percent_Cover_Mean_Mean,
         Percent_Cover_n = Percent_Cover_Mean_n,
         Percent_Cover_SD = Percent_Cover_Mean_SD,
         Percent_Cover_SE = Percent_Cover_Mean_SE,
         Canopy_Height_cm_Mean = Canopy_Height_cm_Mean_Mean,
         Canopy_Height_cm_n = Canopy_Height_cm_Mean_n,
         Canopy_Height_cm_SD = Canopy_Height_cm_Mean_SD,
         Canopy_Height_cm_SE = Canopy_Height_cm_Mean_SE) %>% 
  mutate(data_type = "Plot Type")


sg_summary_fig <- bind_rows(sg_summary_plot,
                            sg_summary_plot_type)


#check order of levels for the data_type variable
levels(as.factor(sg_summary_fig$data_type))


# #reorder the levels for the data_type variable, if necessary
# sg_summary_fig$data_type <- factor(sg_summary_fig$data_type, levels = c("Individual Plots","Plot Type"))
# 
# #check order of level for the data_type variable
# levels(sg_summary_fig$data_type)


```



```{r function to easily plot seagrass and oyster data}
#| echo: false


seagrass_custom_ggplot <- function(summary1, variable_name, plot_type1, plot_type2, y_axis_label, y_axis_min, y_axis_max) {
  gg <- ggplot(summary1, aes(x = data_type, y = !!sym(paste0(variable_name, "_Mean")), group = Plot_Type)) +
        facet_wrap(~Date, nrow = 2, ncol = 1,
               labeller = labeller(Date = c("7/31/2023" = "a) Initial", "9/6/23" = "b) One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    geom_linerange(aes(ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE")),
                      group = Plot_Type,
                      color = Plot_Type),
                   position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
                   linewidth = 0.8) +
    geom_point(size = 3,
               aes(shape = Plot_Type, fill = Plot_Type, color = Plot_Type),
               position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
               show.legend = TRUE) +
    ylim(y_axis_min, y_axis_max) +
    labs(x = "",
         # x = "Unit for which values are calculated",
         y = paste(y_axis_label,"(mean±SE)")) +
    scale_color_manual(values = c("Seagrass+Tiles" = "black", "Seagrass" = "black"), name = "Plot Type") +
    scale_shape_manual(values = c("Seagrass+Tiles" = 21, "Seagrass" = 21), name = "Plot Type") +
    scale_fill_manual(values = c("Seagrass+Tiles" = "lightgreen", "Seagrass" = "darkgreen"), name = "Plot Type") +
    # guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank(),
          axis.title = element_text(face = "bold",
                                    size = 16),
          axis.text.x = element_text(face = "bold",
                                     size = 14),
          axis.text.y = element_text(size = 12),
          strip.text = element_text(size = 14))
  
  return(gg)
}


# Fig_3_Seagrass_Percent_Cover <- seagrass_custom_ggplot(sg_summary_fig, "Percent_Cover", y_axis_label = "Seagrass Percent Cover", y_axis_min = 0, y_axis_max = 100)
# Fig_3_Seagrass_Percent_Cover
# 
# Fig_4_Seagrass_Canopy_Height <- seagrass_custom_ggplot(sg_summary_fig, "Canopy_Height_cm", y_axis_label = "Seagrass Canopy Height (cm)", y_axis_min = 0, y_axis_max = 22)
# Fig_4_Seagrass_Canopy_Height

```


```{r Seagrass Figures}

Fig_3_Seagrass_Percent_Cover <- seagrass_custom_ggplot(sg_summary_fig, "Percent_Cover", y_axis_label = "Seagrass Percent Cover", y_axis_min = 0, y_axis_max = 100)

Fig_4_Seagrass_Canopy_Height <- seagrass_custom_ggplot(sg_summary_fig, "Canopy_Height_cm", y_axis_label = "Seagrass Canopy Height (cm)", y_axis_min = 0, y_axis_max = 22)


Fig_3_Seagrass_Percent_Cover
ggsave("../plots/Fig_3_seagrass_percent_cover.pdf", width = 6, height = 6, units = "in")

Fig_4_Seagrass_Canopy_Height
ggsave("../plots/Fig_4_seagrass_canopy_height.pdf", width = 6, height = 6, units = "in")

```



```{r TEST revised Seagrass Figures}
#| echo: false
#| eval: false

FIG_seagrass_percent_cover <- ggplot(sg_summary_fig, aes(x = data_type, y = Percent_Cover_Mean, group = Plot_Type)) +
    facet_wrap(~Date, nrow = 2, ncol = 1,
               labeller = labeller(Date = c("7/31/2023" = "Initial", "9/6/23" = "One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    geom_linerange(aes(ymin = Percent_Cover_Mean - Percent_Cover_SE,
                      ymax = Percent_Cover_Mean + Percent_Cover_SE,
                      group = Plot_Type,
                      color = Plot_Type),
                  # width = 0.1,
                  position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
                  linewidth = 0.8) +
    geom_point(size = 3,
               aes(shape = Plot_Type, fill = Plot_Type, color = Plot_Type),
               position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
               show.legend = TRUE) +
    labs(x = "Unit for which values are calculated",
         y = "Seagrass Percent Cover (mean±SE)") +
    scale_color_manual(values = c("Seagrass+Tiles" = "black", "Seagrass" = "black"), name = "Plot Type") +
    scale_shape_manual(values = c("Seagrass+Tiles" = 21, "Seagrass" = 21), name = "Plot Type") +
    scale_fill_manual(values = c("Seagrass+Tiles" = "lightgreen", "Seagrass" = "darkgreen"), name = "Plot Type") +
    # guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank())

FIG_seagrass_percent_cover


```



#### Oyster Data Figures


```{r combining oyster summary tables into one table for plotting}
#| echo: false
#| warning: false
#| message: false


#syntax for rename is NEW name first and then old/existing column name


# for oyst_abundance_summary_tile summary table
oyst_abundance_summary_tile <- oyst_abundance_summary_tile %>%
  select(-Plot_Label, -Tile_Tag) %>% 
  mutate(data_type = ifelse(Tile_Type == "Control", "Unseeded Tile",
                            ifelse(Tile_Type == "No-predator", "Ambient Cue Tile",
                                   ifelse(Tile_Type == "Predator", "Predator Cue Tile", "ERROR"))))



# for oyst_abundance_summary_plot summary table
oyst_abundance_summary_plot <- oyst_abundance_summary_plot %>% 
  rename(Oyster_Abundance_Mean = Oyster_Abundance_Mean_Mean_Mean,
         Oyster_Abundance_n = Oyster_Abundance_Mean_Mean_n,
         Oyster_Abundance_SD = Oyster_Abundance_Mean_Mean_SD,
         Oyster_Abundance_SE = Oyster_Abundance_Mean_Mean_SE)

oyst_abundance_summary_plot <- oyst_abundance_summary_plot %>%
  mutate(data_type = ifelse(Tile_Type == "Control", "Unseeded Plot",
                            ifelse(Tile_Type == "No-predator", "Ambient Cue Plot",
                                   ifelse(Tile_Type == "Predator", "Predator Cue Plot", "ERROR"))))


# for oyst_abundance_summary_plot_type summary table
oyst_abundance_summary_plot_type <- oyst_abundance_summary_plot_type %>% 
  rename(Oyster_Abundance_Mean = Oyster_Abundance_Mean_Mean_Mean,
         Oyster_Abundance_n = Oyster_Abundance_Mean_Mean_n,
         Oyster_Abundance_SD = Oyster_Abundance_Mean_Mean_SD,
         Oyster_Abundance_SE = Oyster_Abundance_Mean_Mean_SE) %>% 
  mutate(data_type = "Overall Plot",
         Tile_Type = "All") %>% 
  relocate(Tile_Type, .after = Plot_Type)


oyst_abundance_summary_fig <- bind_rows(oyst_abundance_summary_tile,
                                        oyst_abundance_summary_plot,
                                        oyst_abundance_summary_plot_type)

oyst_abundance_summary_fig <- oyst_abundance_summary_fig %>%
  add_row(Date = "8/2/23",
          Plot_Type = "Seagrass+Tiles",
          Tile_Type = "Control",
          data_type = "Unseeded Tile") %>% 
  add_row(Date = "8/2/23",
          Plot_Type = "Tiles",
          Tile_Type = "Control",
          data_type = "Unseeded Tile") %>% 
  add_row(Date = "8/2/23",
          Plot_Type = "Seagrass+Tiles",
          Tile_Type = "All",
          data_type = "Unseeded Plot") %>% 
  add_row(Date = "8/2/23",
          Plot_Type = "Tiles",
          Tile_Type = "All",
          data_type = "Unseeded Plot")


# #check order of levels for the data_type variable
# levels(as.factor(oyst_abundance_summary_fig$data_type))
# 
# #reorder the levels for the data_type variable
# levels(oyst_abundance_summary_fig$data_type) <- c("Unseeded Tile","Unseeded Plot", "Ambient Cue Tile", "Ambient Cue Plot",
#                                                  "Predator Cue Tile", "Predator Cue Plot", "Overall Plot")

oyst_abundance_summary_fig$data_type <- factor(oyst_abundance_summary_fig$data_type, levels = c("Unseeded Tile","Unseeded Plot", "Ambient Cue Tile", "Ambient Cue Plot", "Predator Cue Tile", "Predator Cue Plot", "Overall Plot"))

# #check order of level for the data_type variable
# levels(oyst_abundance_summary_fig$data_type)

```






## Trying a different way to plot the oyster data


## IMPROVEMENTS TO DO



#### Duplicate for oyster size data!
```{r}

# oyster_custom_ggplot <- function(summary1, summary2, summary3, variable_name, y_axis_label, y_axis_min, y_axis_max) {
FIG_oyst_abundance <- ggplot(oyst_abundance_summary_fig, aes(x = data_type, y = Oyster_Abundance_Mean, group = Plot_Type)) +
    facet_wrap(~Date, nrow = 2, ncol = 1,
               labeller = labeller(Date = c("8/2/23" = "Initial", "9/6/23" = "One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    # geom_errorbar(aes(ymin = Oyster_Abundance_Mean - Oyster_Abundance_SE,
    #                   ymax = Oyster_Abundance_Mean + Oyster_Abundance_SE,
    #                   group = Plot_Type,
    #                   shape = Plot_Type, fill = Plot_Type, color = Plot_Type),
    #               width = 0.1,
    #               position = position_jitterdodge(jitter.width = 0.3,
    #                                               dodge.width = 0.5,
    #                                               seed = 123)) +
    #               # position = position_dodge(width = 0.5)) +
    geom_linerange(aes(ymin = Oyster_Abundance_Mean - Oyster_Abundance_SE,
                      ymax = Oyster_Abundance_Mean + Oyster_Abundance_SE,
                      group = Plot_Type,
                      color = Plot_Type),
                  # width = 0.1,
                  position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
                  linewidth = 0.8) +
    geom_point(size = 3,
               aes(shape = Plot_Type, fill = Plot_Type, color = Plot_Type),
               position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
               # position = position_dodge(width = 0.5),
               show.legend = TRUE) +
    labs(x = "Tile or Plot Type(s) Included in Values",
         y = "Oyster Abundance (mean±SE)") +
         # ,
         # color = "Plot Type",
         # shape = "Plot Type",
         # fill = "Plot Type") +
    scale_color_manual(values = c("Seagrass+Tiles" = "black", "Tiles" = "black"), name = "Plot Type") +
    scale_shape_manual(values = c("Seagrass+Tiles" = 21, "Tiles" = 21), name = "Plot Type") +
    scale_fill_manual(values = c("Seagrass+Tiles" = "lightblue", "Tiles" = "coral"), name = "Plot Type") +
    # guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank())

FIG_oyst_abundance


## IMPROVEMENTS TO DO

### can I jitter the points for those that are overlapping within groups?
### reorder the factor levels for x-axis categories.
### figure out appropriate size to save this as, including appropriate font size for x-axis labels.

#### Duplicate for oyster size data!


```


```{r oyster custom ggplot function}

oyster_custom_ggplot <- function(summary1, variable_name, plot_type1, plot_type2, y_axis_label, y_axis_min, y_axis_max) {
  gg <- ggplot(summary1, aes(x = data_type, y = !!sym(paste0(variable_name, "_Mean")), group = Plot_Type)) +
        facet_wrap(~Date, nrow = 2, ncol = 1,
               labeller = labeller(Date = c("8/2/23" = "a) Initial", "9/6/23" = "b) One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    geom_linerange(aes(ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE")),
                      group = Plot_Type,
                      color = Plot_Type),
                   position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
                   linewidth = 0.8) +
    geom_point(size = 3,
               aes(shape = Plot_Type, fill = Plot_Type, color = Plot_Type),
               position = position_jitterdodge(jitter.width = 0.4,
                                                  dodge.width = 1,
                                                  seed = 155),
               show.legend = TRUE) +
    # ylim(y_axis_min, y_axis_max) +
    labs(x = "",
         # x = "Unit for which values are calculated",
         y = paste(y_axis_label,"(mean±SE)")) +
    scale_color_manual(values = c("Seagrass+Tiles" = "black", "Tiles" = "black"), name = "Plot Type") +
    scale_shape_manual(values = c("Seagrass+Tiles" = 21, "Tiles" = 21), name = "Plot Type") +
    scale_fill_manual(values = c("Seagrass+Tiles" = "lightblue", "Tiles" = "coral"), name = "Plot Type") +
    # guides(shape = guide_legend(override.aes = list(size = 4)))+
    scale_x_discrete(labels = label_wrap(9)) + 
    theme(panel.border = element_blank(),
          axis.title = element_text(face = "bold",
                                    size = 16),
          axis.text.x = element_text(face = "bold",
                                     size = 13),
          axis.text.y = element_text(size = 14),
          strip.text = element_text(size = 16),
          legend.position = c(1, 1),
          legend.justification = c("right","top"),
          legend.box.background = element_rect(color = "black", linewidth = 1))
  
  return(gg)
}

```




```{r Oyster Figures}

Fig_1_Oyster_Abundance <- oyster_custom_ggplot(oyst_abundance_summary_fig, "Oyster_Abundance", y_axis_label = "Oyster Abundance", y_axis_min = 0, y_axis_max = 35)

Fig_1_Oyster_Abundance

# Fig_2_Oyster_Size <- seagrass_custom_ggplot(oyst_size_summary_fig, "Oyster_Size", y_axis_label = "Oyster Size (mm)", y_axis_min = 0, y_axis_max = 30)


Fig_1_Oyster_Abundance
ggsave("../plots/Fig_1_oyster_abundance.pdf", width = 8.5, height = 6.5, units = "in")

# Fig_2_Oyster_Size
# ggsave("../plots/Fig_2_oyster_size.pdf", width = 8.5, height = 6, units = "in")

```




## Unused / Previous Code Chunks

### Seagrass Figures

```{r old way of making seagrass figures}
#| echo: false
#| eval: false

ggplot(data = sg_summary_plot,
       aes(x = Plot_Type, y = Percent_Cover_Mean)) +
  facet_wrap(~Date, nrow = 1, ncol = 2,
             labeller = labeller(Date = c("7/31/2023" = "Initial",
                                          "9/6/23" = "One Month Post-Deployment")),
             scales = "free") +
  theme_classic() + 
  geom_errorbar(aes(ymin = Percent_Cover_Mean - Percent_Cover_SE,
                     ymax = Percent_Cover_Mean + Percent_Cover_SE),
                width = 0.2,
                position = position_jitter(width = 0.3, seed = 123)) +
  geom_point(position = position_jitter(width = 0.3, seed = 123),
             size = 4,
             aes(shape = "plot average", fill = "plot average", color = "plot average"),
             show.legend = TRUE) +
  geom_errorbar(data = sg_summary_plot_type,
                inherit.aes = FALSE,
                aes(x = Plot_Type,
                    ymin = Percent_Cover_Mean_Mean - Percent_Cover_Mean_SE,
                    ymax = Percent_Cover_Mean_Mean + Percent_Cover_Mean_SE),
                 width = 0.2) +
  geom_point(data = sg_summary_plot_type,
             inherit.aes = FALSE,
             aes(x = Plot_Type, y = Percent_Cover_Mean_Mean,
                 shape = "plot type average", fill = "plot type average", color = "plot type average"),
             size = 6,
             show.legend = TRUE) +
  ylim(0,100) +
  labs(x = "Plot Type",
       y = "Seagrass Percent Cover (mean±SE)") +
  scale_color_manual(values = c("plot average" = "black", "plot type average" = "black"), name = "Legend") +
  scale_shape_manual(values = c("plot average" = 21, "plot type average" = 23), name = "Legend") +
  scale_fill_manual(values = c("plot average" = "lightgreen", "plot type average" = "darkgreen"), name = "Legend") +
  guides(
    shape = guide_legend(override.aes = list(size = 4))
  ) +
  theme(panel.border = element_blank())

```


```{r old custom function for making seagrass figures}
#| echo: false
#| eval: false


## function to easily plot the seagrass percent cover and canopy height data without having to copy and paste and rename all the variables....

create_custom_ggplot <- function(summary1, summary2, variable_name, y_axis_label, y_axis_min, y_axis_max) {
  gg <- ggplot(summary1, aes(x = Plot_Type, y = !!sym(paste0(variable_name, "_Mean")))) +
    facet_wrap(~Date, nrow = 1, ncol = 2,
               labeller = labeller(Date = c("7/31/2023" = "Initial", "9/6/23" = "One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    # geom_quasirandom(data = summary1,
    #                  inherit.aes = FALSE,
    #                  aes(x = Plot_Type,
    #                      ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
    #                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE")))) +
    geom_errorbar(aes(ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE"))),
                  width = 0.2,
                  position = position_jitter(width = 0.3, seed = 123)) +
    geom_point(position = position_jitter(width = 0.3, seed = 123),
               size = 4,
               aes(shape = "plot average", fill = "plot average", color = "plot average"),
               show.legend = TRUE) +
    # geom_quasirandom(size = 4,
    #            aes(shape = "plot average", fill = "plot average", color = "plot average"),
    #            show.legend = TRUE) +
    geom_errorbar(data = summary2,
                  inherit.aes = FALSE,
                  aes(x = Plot_Type,
                      ymin = !!sym(paste0(variable_name, "_Mean_Mean")) - !!sym(paste0(variable_name, "_Mean_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean_Mean")) + !!sym(paste0(variable_name, "_Mean_SE"))),
                  width = 0.2) +
    geom_point(data = summary2,
               inherit.aes = FALSE,
               aes(x = Plot_Type, y = !!sym(paste0(variable_name, "_Mean_Mean")),
                   shape = "plot type average", fill = "plot type average", color = "plot type average"),
               size = 6,
               show.legend = TRUE) +
    ylim(y_axis_min, y_axis_max) +
    labs(x = "Plot Type",
         y = paste(y_axis_label, " (mean±SE)")) +
    scale_color_manual(values = c("plot average" = "black", "plot type average" = "black"), name = "Legend") +
    scale_shape_manual(values = c("plot average" = 21, "plot type average" = 23), name = "Legend") +
    scale_fill_manual(values = c("plot average" = "lightgreen", "plot type average" = "darkgreen"), name = "Legend") +
    guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank())
  
  return(gg)
}



seagrass_percent_cover_fig <- create_custom_ggplot(sg_summary_plot, sg_summary_plot_type, "Percent_Cover", "Seagrass Percent Cover", 0, 100)
print(seagrass_percent_cover_fig)

seagrass_canopy_height_fig <- create_custom_ggplot(sg_summary_plot, sg_summary_plot_type, "Canopy_Height_cm", "Seagrass Canopy Height (cm)", 0, 25)
print(seagrass_canopy_height_fig)


```


### Oyster Figures

```{r providing an x-axis jitter value for all oyster datasets}
#| echo: false
#| eval: false


# jitter_values <- function(){
#   
# }
  
oyst_abundance_summary_tile <- oyst_abundance_summary_tile %>% 
  mutate(x_jitter = ifelse(Plot_Type == "Seagrass+Tiles", 0.18, 0.68)) %>% 
  mutate(x_jitter = ifelse(Tile_Type == "Predator", x_jitter + 0.14, x_jitter)) %>% 
  mutate(Tile_Type = as.factor(Tile_Type))

oyst_abundance_summary_plot <- oyst_abundance_summary_plot %>% 
  mutate(x_jitter = ifelse(Plot_Type == "Seagrass+Tiles", 0.21, 0.71)) %>% 
  mutate(x_jitter = ifelse(Tile_Type == "Predator", x_jitter + 0.14, x_jitter)) %>% 
  mutate(Tile_Type = as.factor(Tile_Type))

oyst_abundance_summary_plot_type <- oyst_abundance_summary_plot_type %>% 
  mutate(x_jitter = ifelse(Plot_Type == "Seagrass+Tiles", 0.25, 0.75))

```



```{r custom function for plotting oyster data}
#| echo: false
#| eval: false

oyster_custom_ggplot <- function(summary1, summary2, summary3, variable_name, y_axis_label, y_axis_min, y_axis_max) {
  gg <- ggplot(summary1, aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean")))) +
    facet_wrap(~Date, nrow = 1, ncol = 2,
               labeller = labeller(Date = c("8/2/23" = "Initial", "9/6/23" = "One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    geom_errorbar(aes(ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE"))),
                  width = 0.1) +
    geom_point(size = 4,
               aes(shape = "tile average", fill = "tile average", color = "tile average"),
               show.legend = TRUE) +
    geom_errorbar(data = summary2,
                  inherit.aes = FALSE,
                  aes(x = x_jitter,
                      ymin = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) - !!sym(paste0(variable_name, "_Mean_Mean_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) + !!sym(paste0(variable_name, "_Mean_Mean_SE"))),
                  width = 0.1) +
    geom_point(data = summary2,
               inherit.aes = FALSE,
               aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean_Mean_Mean")),
                   shape = "plot average", fill = "plot average", color = "plot average"),
               size = 6,
               show.legend = TRUE) +
    geom_errorbar(data = summary3,
                  inherit.aes = FALSE,
                  aes(x = x_jitter,
                      ymin = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) - !!sym(paste0(variable_name, "_Mean_Mean_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) + !!sym(paste0(variable_name, "_Mean_Mean_SE"))),
                  width = 0.1) +
    geom_point(data = summary3,
               inherit.aes = FALSE,
               aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean_Mean_Mean")),
                   shape = "plot type average", fill = "plot type average", color = "plot type average"),
               size = 6,
               show.legend = TRUE) +
    scale_x_continuous(breaks = c(0.25, 0.75), labels = c("Seagrass+Tiles", "Tiles")) +
    ylim(y_axis_min, y_axis_max) +
    labs(x = "Plot Type",
         y = paste(y_axis_label, " (mean±SE)")) +
    scale_color_manual(values = c("tile average" = "black", "plot average" = "black", "plot type average" = "black"), name = "Legend") +
    scale_shape_manual(values = c("tile average" = 21, "plot average" = 21, "plot type average" = 23), name = "Legend") +
    scale_fill_manual(values = c("tile average" = "lightblue", "plot average" = "darkblue", "plot type average" = "gold"), name = "Legend") +
    guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank())
  
  return(gg)
}


oyster_custom_ggplot(oyst_abundance_summary_tile,
                     oyst_abundance_summary_plot,
                     oyst_abundance_summary_plot_type,
                     "Oyster_Abundance",
                     "Oyster Abundance",
                     0, 35)

```



```{r chatGPT suggestions for revised oyster ggplot function}
#| echo: false
#| eval: false


## revised oyster ggplot function from chatGPT suggestions

oyster_custom_ggplot_2 <- function(summary1, summary2, summary3, variable_name, y_axis_label, y_axis_min, y_axis_max) {
  gg <- ggplot(summary1, aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean")))) +
    facet_wrap(~Date, nrow = 1, ncol = 2,
               labeller = labeller(Date = c("8/2/23" = "Initial", "9/6/23" = "One Month Post-Deployment")),
               scales = "free") +
    theme_classic() + 
    geom_errorbar(aes(ymin = !!sym(paste0(variable_name, "_Mean")) - !!sym(paste0(variable_name, "_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean")) + !!sym(paste0(variable_name, "_SE"))),
                  width = 0.1) +
    geom_point(size = 4, aes(shape = "tile average", fill = Tile_Type, color = Tile_Type),
               show.legend = TRUE) +
    scale_color_manual(values = c("Level1" = "red", "Level2" = "blue", "Level3" = "green")) +
    scale_fill_manual(values = c("Level1" = "red", "Level2" = "blue", "Level3" = "green")) +
    # 
    # geom_point(size = 4,
    #            aes(shape = "tile average", fill = Tile_Type, color = Tile_Type),
    #            show.legend = TRUE) +
    geom_errorbar(data = summary2,
                  inherit.aes = FALSE,
                  aes(x = x_jitter,
                      ymin = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) - !!sym(paste0(variable_name, "_Mean_Mean_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) + !!sym(paste0(variable_name, "_Mean_Mean_SE"))),
                  width = 0.1) +
    geom_point(data = summary2,
               inherit.aes = FALSE,
               aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean_Mean_Mean")),
                   shape = "plot average", fill = Tile_Type, color = Tile_Type),
               size = 6,
               show.legend = TRUE) +
    geom_errorbar(data = summary3,
                  inherit.aes = FALSE,
                  aes(x = x_jitter,
                      ymin = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) - !!sym(paste0(variable_name, "_Mean_Mean_SE")),
                      ymax = !!sym(paste0(variable_name, "_Mean_Mean_Mean")) + !!sym(paste0(variable_name, "_Mean_Mean_SE"))),
                  width = 0.1) +
    geom_point(data = summary3,
               inherit.aes = FALSE,
               aes(x = x_jitter, y = !!sym(paste0(variable_name, "_Mean_Mean_Mean")),
                   shape = "plot type average", fill = "plot type average", color = "plot type average"),
               size = 6,
               show.legend = TRUE) +
    scale_x_continuous(breaks = c(0.25, 0.75), labels = c("Seagrass+Tiles", "Tiles")) +
    ylim(y_axis_min, y_axis_max) +
    labs(x = "Plot Type",
         y = paste(y_axis_label, " (mean±SE)")) +
    scale_color_manual(values = c("tile average" = "black", "plot average" = "black", "plot type average" = "black",
                                  Tile_Type = c("Level1" = "gray", "Level2" = "blue", "Level3" = "yellow")), name = "Legend") +
    scale_shape_manual(values = c("tile average" = 21, "plot average" = 21, "plot type average" = 23), name = "Legend") +
    scale_fill_manual(values = c("tile average" = "lightblue", "plot average" = "darkblue", "plot type average" = "gold"), name = "Legend") +
    # 
    # scale_color_manual(values = c("tile average" = "black", "plot average" = "black", "plot type average" = "black"), name = "Legend") +
    # scale_shape_manual(values = c("tile average" = 21, "plot average" = 21, "plot type average" = 23), name = "Legend") +
    # scale_fill_manual(values = c("tile average" = "lightblue", "plot average" = "darkblue", "plot type average" = "gold"), name = "Legend") +
    guides(shape = guide_legend(override.aes = list(size = 4)))+
    theme(panel.border = element_blank())
  
  return(gg)
}


oyster_custom_ggplot_2(oyst_abundance_summary_tile,
                     oyst_abundance_summary_plot,
                     oyst_abundance_summary_plot_type,
                     "Oyster_Abundance",
                     "Oyster Abundance",
                     0, 35)

```



